//解法一  时间复杂度 O(n)   空间复杂度 O(1)      在同一个数组中进行数值调换
class Solution {
public:
    // Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    
    //时间复杂度 O(n)   空间复杂度 O(1)
    bool duplicate(int numbers[], int length, int* duplication) 
    {
        if(numbers == NULL || length ==0)
            return false;
        for(auto i = 0; i < length; i++)
            if(numbers[i] < 0 || numbers[i] >= length)
                return false;
        for(auto i = 0; i < length; i++)
        {
            while(numbers[i] != i)   //不能够用if  一直循环直到找到重复或者数组对应的下标值和存储的值相对应
            {
                if(numbers[i] == numbers[numbers[i]])
                {
                    *duplication = numbers[i];
                    return true;
                }
                swap(numbers[i], numbers[numbers[i]]);
            }
        }
        return false;
    }
};
